import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Copy, ExternalLink } from 'lucide-react';

interface WalletConnectModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export function WalletConnectModal({ isOpen, onClose }: WalletConnectModalProps) {
  const [qrCodeDataURL, setQrCodeDataURL] = useState<string>('');
  const [uri, setUri] = useState<string>('');
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'failed'>('idle');
  const { toast } = useToast();

  useEffect(() => {
    if (isOpen) {
      generateConnectionURI();
    } else {
      resetState();
    }
  }, [isOpen]);

  const resetState = () => {
    setQrCodeDataURL('');
    setUri('');
    setIsConnecting(false);
    setConnectionStatus('idle');
  };

  const generateConnectionURI = async () => {
    setIsConnecting(true);
    setConnectionStatus('connecting');
    
    try {
      // Generate a mock WalletConnect URI for demonstration
      // In production, this would be generated by WalletConnect SDK
      const mockUri = `wc:${generateRandomId()}@2?relay-protocol=irn&symKey=${generateRandomKey()}`;
      setUri(mockUri);

      // Generate QR code using QR Server API (free service)
      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=280x280&data=${encodeURIComponent(mockUri)}`;
      setQrCodeDataURL(qrApiUrl);

      // Simulate connection timeout
      setTimeout(() => {
        if (connectionStatus === 'connecting') {
          setConnectionStatus('failed');
          toast({
            title: "Connection Timeout",
            description: "No wallet responded. Please try again.",
            variant: "destructive"
          });
        }
      }, 30000);

    } catch (error) {
      console.error('Failed to generate WalletConnect URI:', error);
      setConnectionStatus('failed');
      toast({
        title: "Connection Failed",
        description: "Failed to generate connection code. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsConnecting(false);
    }
  };

  const generateRandomId = () => {
    return Array.from({ length: 32 }, () => Math.random().toString(36)[2]).join('');
  };

  const generateRandomKey = () => {
    return Array.from({ length: 64 }, () => Math.random().toString(36)[2]).join('');
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(uri);
      toast({
        title: "Copied!",
        description: "Connection URI copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Could not copy to clipboard",
        variant: "destructive"
      });
    }
  };

  const openInWallet = (walletName: string, deepLink: string) => {
    const encodedUri = encodeURIComponent(uri);
    const fullLink = deepLink + encodedUri;
    
    // Try to open the deep link
    window.open(fullLink, '_self');
    
    toast({
      title: "Opening " + walletName,
      description: "Check your " + walletName + " app to approve the connection",
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="text-center text-white">Connect with WalletConnect</DialogTitle>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* QR Code Section */}
          <div className="flex flex-col items-center space-y-4">
            {isConnecting ? (
              <div className="w-[280px] h-[280px] bg-gray-800 rounded-lg flex items-center justify-center">
                <Loader2 className="w-8 h-8 animate-spin text-blue-500" />
              </div>
            ) : qrCodeDataURL ? (
              <div className="p-4 bg-white rounded-lg">
                <img src={qrCodeDataURL} alt="WalletConnect QR Code" className="w-[280px] h-[280px]" />
              </div>
            ) : (
              <div className="w-[280px] h-[280px] bg-gray-800 rounded-lg flex items-center justify-center">
                <span className="text-gray-400">Failed to generate QR code</span>
              </div>
            )}

            <div className="text-center text-sm text-gray-400 max-w-sm">
              Scan this QR code with your mobile wallet app to connect
            </div>
          </div>

          {/* Mobile Wallet Quick Links */}
          <div className="space-y-3">
            <div className="text-sm text-gray-300 text-center">Or open directly in your wallet:</div>
            <div className="grid grid-cols-2 gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => openInWallet('MetaMask', 'https://metamask.app.link/wc?uri=')}
                className="flex items-center justify-center space-x-2"
              >
                <div className="w-4 h-4 bg-orange-500 rounded"></div>
                <span>MetaMask</span>
                <ExternalLink className="w-3 h-3" />
              </Button>
              
              <Button
                variant="outline"
                size="sm"
                onClick={() => openInWallet('Trust Wallet', 'https://link.trustwallet.com/wc?uri=')}
                className="flex items-center justify-center space-x-2"
              >
                <div className="w-4 h-4 bg-blue-500 rounded"></div>
                <span>Trust</span>
                <ExternalLink className="w-3 h-3" />
              </Button>

              <Button
                variant="outline"
                size="sm"
                onClick={() => openInWallet('Rainbow', 'https://rnbwapp.com/wc?uri=')}
                className="flex items-center justify-center space-x-2"
              >
                <div className="w-4 h-4 bg-gradient-to-r from-pink-500 to-purple-500 rounded"></div>
                <span>Rainbow</span>
                <ExternalLink className="w-3 h-3" />
              </Button>

              <Button
                variant="outline"
                size="sm"
                onClick={() => openInWallet('Coinbase', 'https://go.cb-w.com/wc?uri=')}
                className="flex items-center justify-center space-x-2"
              >
                <div className="w-4 h-4 bg-blue-600 rounded"></div>
                <span>Coinbase</span>
                <ExternalLink className="w-3 h-3" />
              </Button>
            </div>
          </div>

          {/* Copy URI Button */}
          {uri && (
            <Button
              variant="outline"
              onClick={copyToClipboard}
              className="w-full flex items-center justify-center space-x-2"
            >
              <Copy className="w-4 h-4" />
              <span>Copy Connection Code</span>
            </Button>
          )}

          {/* Status Messages */}
          {connectionStatus === 'connecting' && (
            <div className="text-center text-blue-400 text-sm">
              Waiting for wallet connection...
            </div>
          )}

          {connectionStatus === 'failed' && (
            <div className="text-center space-y-2">
              <div className="text-red-400 text-sm">Connection failed or timed out</div>
              <Button
                variant="outline"
                size="sm"
                onClick={generateConnectionURI}
                className="text-xs"
              >
                Try Again
              </Button>
            </div>
          )}

          {/* Instructions */}
          <div className="text-xs text-gray-500 text-center space-y-1">
            <div>1. Open your mobile wallet app</div>
            <div>2. Scan the QR code or tap a wallet button above</div>
            <div>3. Approve the connection in your wallet</div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}